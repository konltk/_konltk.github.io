<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Korean Natural Language Toolkit on Test Site for KoNLTK and KoNLP</title>
    <link>https://kontlk.github.io/</link>
    <description>Recent content in Korean Natural Language Toolkit on Test Site for KoNLTK and KoNLP</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 24 Apr 2017 18:36:24 +0200</lastBuildDate>
    
	<atom:link href="https://kontlk.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Konlp Document</title>
      <link>https://kontlk.github.io/document/</link>
      <pubDate>Thu, 28 Dec 2017 08:58:25 +0900</pubDate>
      
      <guid>https://kontlk.github.io/document/</guid>
      <description>konlp Document konlp.detector package Module contents 이 모듈에는 파일 혹은 문자열의 문자 인코딩을 확인을 할 수 있는 class가 포함되어 있습니다.
Submodules konlp.detector.detector module class konlp.detector.detector.Detect  detect(text, max) Parameters: - text(string): 문자 인코딩을 확일한 텍스트 혹은 파일의 path - max(int): 문자열 혹은 파일에서 앞에서 max만큼의 문자를 확인을 합니다. max의 수가 커질수록 정확도는 향상이 되지만 속도는 더 오래 걸릴 수 있습니다. Return: &amp;ldquo;NONE&amp;rdquo;, &amp;ldquo;EUCKR&amp;rdquo;, &amp;ldquo;UTF8&amp;rdquo;, &amp;ldquo;UTF16BE&amp;rdquo;, &amp;ldquo;UTF16LE&amp;rdquo; 이 중 하나를 얻습니다.</description>
    </item>
    
    <item>
      <title>konltk modules</title>
      <link>https://kontlk.github.io/modules/modules/</link>
      <pubDate>Thu, 28 Dec 2017 08:58:25 +0900</pubDate>
      
      <guid>https://kontlk.github.io/modules/modules/</guid>
      <description>konltk moduels
konltk.detector package Module contents 이 모듈에는 파일 혹은 문자열의 문자 인코딩을 확인을 할 수 있는 class가 포함되어 있습니다.
Submodules konltk.detector.detector module class konltk.detector.detector.Detect detect(text, max) Parameters: - text(string): 문자 인코딩을 확일한 텍스트 혹은 파일의 path - max(int): 문자열 혹은 파일에서 앞에서 max만큼의 문자를 확인을 합니다. max의 수가 커질수록 정확도는 향상이 되지만 속도는 더 오래 걸릴 수 있습니다. Return: &amp;ldquo;NONE&amp;rdquo;, &amp;ldquo;EUCKR&amp;rdquo;, &amp;ldquo;UTF8&amp;rdquo;, &amp;ldquo;UTF16BE&amp;rdquo;, &amp;ldquo;UTF16LE&amp;rdquo; 이 중 하나를 얻습니다. Return Type: string</description>
    </item>
    
    <item>
      <title>footer</title>
      <link>https://kontlk.github.io/_footer/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>https://kontlk.github.io/_footer/</guid>
      <description>Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</description>
    </item>
    
    <item>
      <title>header</title>
      <link>https://kontlk.github.io/_header/</link>
      <pubDate>Mon, 24 Apr 2017 18:36:24 +0200</pubDate>
      
      <guid>https://kontlk.github.io/_header/</guid>
      <description>Test Site for KoNLP and KoNLTK</description>
    </item>
    
    <item>
      <title>Credits</title>
      <link>https://kontlk.github.io/credits/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kontlk.github.io/credits/</guid>
      <description>github contributors .ghContributors{ display:flex; flex-flow: wrap; align-content: flex-start } .ghContributors  div{ width: 50% ; display: inline-flex; margin-bottom: 5px; } .ghContributors  div label{ padding-left: 4px ; } .ghContributors  div span{ font-size: x-small; padding-left: 4px ; }   @hyunyoung2 2 commits   @YoungHunCho 1 commits   Other contributors  @hyunyoung2 supports and advices   Packages and libraries  Bootstrap - front-end framework mermaid - generation of diagram and flowchart from text in a similar manner as markdown font awesome - the iconic font and CSS framework jQuery - The Write Less, Do More, JavaScript Library lunr - Lunr enables you to provide a great search experience without the need for external, server-side, search services&amp;hellip; JavaScript-autoComplete - An extremely lightweight and powerful vanilla JavaScript completion suggester.</description>
    </item>
    
    <item>
      <title>C언어를 파이썬 모듈화 할 때 파이썬 2, 3버전 호환 가능한 매크로</title>
      <link>https://kontlk.github.io/documents/extending-python3-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kontlk.github.io/documents/extending-python3-c/</guid>
      <description>모듈 초기화 파이썬 2버전을 확장할때에는 init+모듈이름 함수 이내에 &amp;lsquo;Py_InitModule&amp;rsquo; 과 같은 함수를 사용하여서 모듈을 초기화 했다.
파이썬 3버전에서는 &amp;lsquo;PyModule_Create&amp;rsquo; 함수를 사용해서 모듈을 초기화 한다. PyModule_Create 함수를 호출할 때에는 PyModuleDef 구조체를 인자로 넘거야 한다.
static struct PyModuleDef moduledef = { PyModuleDef_HEAD_INIT, &amp;quot;lib&amp;quot;, /* name of module */ NULL, /* module documentation, may be NULL */ -1, /* size of per-interpreter state of the module, or -1 if the module keeps state in global variables.</description>
    </item>
    
    <item>
      <title>Docdock-built Sites</title>
      <link>https://kontlk.github.io/showcase/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kontlk.github.io/showcase/</guid>
      <description> https://invincible.site/ by @shazic https://bitfan.io/ by @vjeantet </description>
    </item>
    
    <item>
      <title>Installing konltk</title>
      <link>https://kontlk.github.io/contents/installing-konltk/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kontlk.github.io/contents/installing-konltk/</guid>
      <description>Installing konltk konltk는 맥을 제외한 리눅스 계열에서 사용이 가능합니다.
코드 다운받기 명령어로 코드를 다운받는 방법 git clone https://github.com/konltk/konltk  Github페이지로 들어가서 코드를 다운받는 방법 konltk github 주소에 접속하여 코드를 다운 받습니다. 설치하기 설치는 터미널의 명령어로 진행을 합니다. 설치전 python-dev(파이썬 3.xx 버전을 사용시 python3-dev)이 설치가 되어 있어야 합니다.
코드를 다운 받은 후(Github 페이지에서 다운을 받았으면 unzip도 해야합니다) 가장 최상위 폴더로 이동을 합니다. 이동 후 sudo python setup.py install(파이썬 3.xx 버전을 사용시 sudo python3 setup.</description>
    </item>
    
    <item>
      <title>Python extending with C</title>
      <link>https://kontlk.github.io/documents/python-extending-with-c/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kontlk.github.io/documents/python-extending-with-c/</guid>
      <description>This document is based on the Python 2.x version.
As a python extending language c Python work when load module 파이썬에서 모듈을 로드를 할 때에 아래와 같은 순서로 모듈을 찾게 된다. &amp;gt; * 기본 모듈(soket, time 등) &amp;gt; * c로 만들어진 dll 파일 &amp;gt; * 자체 제작한 파이썬 모듈
예시로 만약 파이썬에서 import mylib을 수행한다면, 파이썬에서는 sys.module과 sys.path의 디렉토리를 검색하여 mylib이라는 모듈을 찾는다.
Create module using language c c언어로 된 코드를 파이썬에서 로드하기 위해서는 c code에 대한 라이브러리 파일이 필요하다.</description>
    </item>
    
    <item>
      <title>Python extending with C class wrapping</title>
      <link>https://kontlk.github.io/documents/python-extending-with-c-class-wrapping/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kontlk.github.io/documents/python-extending-with-c-class-wrapping/</guid>
      <description>intro 가끔 c로 작성한 코드가 python으로 작성한 코드보다 효율이 좋을때가 있습니다. 이럴때는 파이썬에서도 c로 작성한 코드를 사용할 수 있게 확장을 할 수 있습니다. 이 문서에서는 c로 작성된 코드를 사용하여서 파이썬에서 ‘class’로 사용하기 위해서 wrapping을 하는 방법을 정리한 것입니다.
c에서는 함수부분만 정의 나머지 작업은 python 내에서 구현 python extending with c 방식으로 c로 주요 함수만 구현 python에서 제공하는 python c extending을 이용하여서 주요 함수를 c로 구현을 한다.
static PyObject* wordcount(PyObject* self, PyObject* args){ int is_add = 0, n_uniqwords, n_words; char* input, *output_file = OUTPUT; PyObject *dlist = PyDict_New(); PyObject *result_list = PyList_New(0); int i; FILE* temp_output_file; WORDCNT_STR Text={0}, *wp=&amp;amp;Text; if(!</description>
    </item>
    
    <item>
      <title>konltk main</title>
      <link>https://kontlk.github.io/contents/konltk-main/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kontlk.github.io/contents/konltk-main/</guid>
      <description>konltk main</description>
    </item>
    
    <item>
      <title>python 2버전 배포시 서브 모듈 설정하기</title>
      <link>https://kontlk.github.io/documents/python-2%EB%B2%84%EC%A0%84-%EB%B0%B0%ED%8F%AC%EC%8B%9C-%EC%84%9C%EB%B8%8C-%EB%AA%A8%EB%93%88-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kontlk.github.io/documents/python-2%EB%B2%84%EC%A0%84-%EB%B0%B0%ED%8F%AC%EC%8B%9C-%EC%84%9C%EB%B8%8C-%EB%AA%A8%EB%93%88-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0/</guid>
      <description>python 2버전 배포시 서브 모듈 설정하기 python 서브모듈 파이썬에서는 폴더별로 서브모듈이 나뉘어진다.
foo |--tmp | |--__init__.py | |--tmp.py | |--foo.py  위와 같이 파일구조로 되어있다면 실제로 파이썬에서는
import foo.tmp.tmp  디렉토리 구조로서 서브모듈을 접근이 가능하다.
python extending with c 서브모듈 설정 서브모듈을 설정하기 위해서 우선 c code의 InitModule을 할 때 서브 모듈명을 명시를 해야한다. Py_InitModule(&amp;quot;foo.tmp.tmp&amp;quot;, methods, &amp;quot;&amp;quot;) 서브 모듈명은 자신이 사용하고 싶은 모듈명을 명시하면 된다.
파이썬3버전에서는 위의 단계만하여도 실제로 사용하는데에 있어서 문제가 없다.</description>
    </item>
    
    <item>
      <title>오픈소스에 contribution 하기</title>
      <link>https://kontlk.github.io/documents/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4%EC%97%90-contribution-%ED%95%98%EA%B8%B0/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kontlk.github.io/documents/%EC%98%A4%ED%94%88%EC%86%8C%EC%8A%A4%EC%97%90-contribution-%ED%95%98%EA%B8%B0/</guid>
      <description>github에서 오픈소스 컨트리뷰션 하기 프로젝트 fork하기 우선 컨트리뷰션하고 싶은 오픈소스의 깃허브에 들어가서 fork를 해야합니다.
여기서는 konlp로 예시를 들어보겠습니다.
konlp 여기에 들어가 우측 상단에 있는 fork버튼을 눌러 자신의 github 계정에 프로젝트를 복사를 한다.
흐름 여기서는 브랜치를 따로 만들어서 하는것이라니라 master 브랜치에서 진행한 것을 예로 듭니다. 1. 내용을 수정하여서 커밋한다. 2. 자신의 GitHub 프로젝트에 Push를 한다. 3. Pull Request를 한다. 4. 프로젝트 소유자가 Requset를 Merge한다.
흐름은 위와 같이 진행이 된다.
Pull Request 하기 자기가 원하는 프로젝트를 fork하였다면 github.</description>
    </item>
    
    <item>
      <title>파이썬 배포 할 때 파일을 포함하는 방법</title>
      <link>https://kontlk.github.io/documents/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%ED%8C%8C%EC%9D%BC-%EB%B0%B0%ED%8F%AC/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://kontlk.github.io/documents/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%ED%8C%8C%EC%9D%BC-%EB%B0%B0%ED%8F%AC/</guid>
      <description>파이썬 배포 할 때 파일을 포함하는 방법 자신이 짠 파이썬 코드를 배포를 하고 싶을 때는 distutiles.core모듈을 사용하여서 배포가 가능한 형태로 만들 수가 있다. disturils.code 모듈의 setup함수를 사용하여서 배포할 패키지를 구성할 수 있다. setup함수에서 여러 구성요소는 python docs 2.7에서 확인할 수 있다.
여기서 data_files옵션을 이용하여서 파일도 포함하여 배포하는것을 볼 것이다.
setup.py src/ ____data/ ________data1.dat ________data2.dat ________data3.dat  위와 같이 파일 구조를 가지고 있는다면 setup함수 내에서 data_files1옵션을 아래와 같이 사용할 수 있다.</description>
    </item>
    
  </channel>
</rss>